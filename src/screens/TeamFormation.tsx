// src/screens/TeamFormation.tsx
import { useState } from "react";
import {
  Card,
  Form,
  Input,
  Select,
  DatePicker,
  Row,
  Col,
  Tabs,
  Table,
  Tag,
  Button,
  message,
} from "antd";
import { PlusOutlined, DeleteOutlined } from "@ant-design/icons";
import dayjs, { Dayjs } from "dayjs";
import { useEffect } from "react";
import { fetchEmployees } from "../services/api";

import { ProjectForm } from "../types";
import { recommendTeam, createProject } from "../services/project";
import { useNavigate } from "react-router-dom";
import Header from "../components/Header/Header";
import Footer from "../components/Footer/Footer";
import Navigation from "../components/Navigation/Navigation";
import LoadCell from "../components/LoadCell";

const { RangePicker } = DatePicker;

/* ------------------------------------------------------------------ */

export default function TeamFormation() {
  const [form] = Form.useForm<ProjectForm & { range: [Dayjs, Dayjs] }>();

  const [recommended, setRecommended] = useState<Employee[]>([]);
  const [loadingRec, setLoadingRec] = useState(false);
  const [team, setTeam] = useState<Employee[]>([]);

  const [manual, setManual] = useState<Employee[]>([]);
  const [manLoading, setManLoading] = useState(false);
  const [manPage, setManPage] = useState({ current: 1, pageSize: 8, total: 0 });

  /* ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ ‚îÄ‚îÄ‚îÄ */
  const loadManual = async (page = 1) => {
    setManLoading(true);
    try {
      const data = await fetchEmployees(page, manPage.pageSize);
      setManual(data);
      setManPage((p) => ({ ...p, current: page, total: 200 })); // total –º–æ–∂–Ω–æ –∂—ë—Å—Ç–∫–æ 200 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    } finally {
      setManLoading(false);
    }
  };
  useEffect(() => {
    loadManual();
  }, []);

  const navigate = useNavigate();

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const addMember = (e: Employee) =>
    setTeam((t) => (t.some((m) => m.id === e.id) ? t : [...t, e]));

  const removeMember = (id: number) =>
    setTeam((t) => t.filter((m) => m.id !== id));

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const onFinish = async (values: any) => {
    if (!team.length) {
      message.warning("–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
      return;
    }
    const [start, end] = values.range; // Dayjs[]
    const payload = {
      ...values,
      start: start.format("YYYY-MM-DD"),
      end: end.format("YYYY-MM-DD"),
      team: team.map((t) => ({ ...t, role: t.position })),
    };
    delete payload.range;

    try {
      const proj = await createProject(payload as any);
      message.success("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω");
      navigate(`/projects/${proj.id}`);
    } catch {
      message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞");
    }
  };

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const loadCol = {
    title: "–ó–∞–≥—Ä—É–∑–∫–∞",
    dataIndex: "capacity",
    render: (v: number) => <LoadCell v={v} />,
  };

  const empCols = [
    { title: "–ò–º—è", dataIndex: "name" },
    { title: "–ü–æ–∑–∏—Ü–∏—è", dataIndex: "position" },
    loadCol,
    {
      title: "–°—Ç–µ–∫",
      render: (_: any, r: Employee) =>
        r.stack?.map((s) => <Tag key={s}>{s}</Tag>),
    },
    {
      title: "",
      width: 40,
      render: (_: any, r: Employee) => (
        <Button
          type="text"
          icon={<PlusOutlined />}
          onClick={() => addMember(r)}
        />
      ),
    },
  ];

  const teamCols = [
    { title: "–ò–º—è", dataIndex: "name" },
    { title: "–†–æ–ª—å", dataIndex: "position" },
    loadCol,
    {
      title: "",
      width: 40,
      render: (_: any, r: Employee) => (
        <Button
          type="text"
          icon={<DeleteOutlined />}
          onClick={() => removeMember(r.id)}
        />
      ),
    },
  ];

  /* ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ---------- */
  type Variant = { label: string; desc: string; members: Employee[] };
  const [variants, setVariants] = useState<Variant[]>([]);

  const onRecommend = async () => {
    const skills: string[] = form.getFieldValue("skills") || [];
    setLoadingRec(true);
    try {
      // —Ç—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥ (–º–æ–∂–Ω–æ Promise.all)
      const [opt, hard, analytic] = await Promise.all([
        recommendTeam({ skills, size: 5 }),
        recommendTeam({ skills, size: 6 }),
        recommendTeam({ skills, size: 4 }),
      ]);
      setVariants([
        {
          label: "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä",
          desc: "–ö–æ–º–∞–Ω–¥–∞, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏ —É—Ä–æ–≤–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–º–µ—é—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏.",
          members: opt.members.map(mockCap),
        },
        {
          label: "üí™ –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É (—Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã +30%)",
          desc: "–ö–æ–º–∞–Ω–¥–∞ —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º –±–ª–æ–∫–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤–∫–ª—é—á–∞—é—â–∞—è –±–æ–ª—å—à–µ —Å–µ–Ω—å–æ—Ä-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –≠—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
          members: hard.members.map(mockCap),
        },
        {
          label: "üîç –°–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
          desc: "–ö–æ–º–∞–Ω–¥–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏, –≤–∫–ª—é—á–∞—è BA –∏ DA. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
          members: analytic.members.map(mockCap),
        },
      ]);
    } catch {
      message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é");
    } finally {
      setLoadingRec(false);
    }
  };

  /* –µ—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –Ω–µ—Ç capacity */
  const mockCap = (e: Employee) => ({
    ...e,
    capacity: e.capacity ?? Math.floor(Math.random() * 100),
  });

  /* ------------------------------------------------------------------ */

  return (
    <>
      <Header />
      <Navigation />
      <div
        style={{
          maxWidth: 1300,
          margin: "24px auto",
          height: "10000px",
          width: "100%",
        }}
      >
        <Row gutter={24}>
          {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
          <Col xs={24} md={14}>
            {/* —Ñ–æ—Ä–º–∞ –ø—Ä–æ–µ–∫—Ç–∞ */}
            <Card title="–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞" style={{ marginBottom: 24 }}>
              <Form
                form={form}
                layout="vertical"
                initialValues={{ priority: "Med" }}
                onFinish={onFinish}
              >
                <Form.Item
                  name="name"
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ"
                  rules={[{ required: true }]}
                >
                  <Input />
                </Form.Item>

                <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
                  <Input.TextArea autoSize={{ minRows: 2 }} />
                </Form.Item>

                <Form.Item name="skills" label="–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏">
                  <Select mode="tags" placeholder="React, Java‚Ä¶" />
                </Form.Item>

                <Form.Item
                  name="range"
                  label="–°—Ä–æ–∫–∏"
                  rules={[{ required: true, message: "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã" }]}
                >
                  <RangePicker />
                </Form.Item>

                <Form.Item name="priority" label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç">
                  <Select>
                    <Select.Option value="Low">–ù–∏–∑–∫–∏–π üî•</Select.Option>
                    <Select.Option value="Med">–°—Ä–µ–¥–Ω–∏–π üî•üî•</Select.Option>
                    <Select.Option value="High">–í—ã—Å–æ–∫–∏–π üî•üî•üî•</Select.Option>
                  </Select>
                </Form.Item>
              </Form>
            </Card>

            {/* –≤–∫–ª–∞–¥–∫–∏ */}
            <Card>
              <Tabs defaultActiveKey="manual" style={{ marginTop: 0 }}>
                {/* ---- manual ---- */}
                <Tabs.TabPane tab="–†—É—á–Ω–æ–π –ø–æ–¥–±–æ—Ä" key="manual">
                  <Table
                    rowKey="id"
                    loading={manLoading}
                    dataSource={manual}
                    columns={empCols}
                    size="small"
                    pagination={{
                      ...manPage,
                      onChange: (p) => loadManual(p),
                    }}
                    scroll={{ y: 260 }}
                    style={{ marginTop: 12 }}
                  />
                </Tabs.TabPane>

                {/* ---- recommended ---- */}
                <Tabs.TabPane tab="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–æ—Å—Ç–∞–≤" key="recommend">
                  <Button
                    type="primary"
                    onClick={onRecommend}
                    loading={loadingRec}
                  >
                    –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                  </Button>

                  {variants.length > 0 && (
                    <div
                      style={{
                        marginTop: 16,
                        display: "flex",
                        flexDirection: "column",
                        gap: 24,
                      }}
                    >
                      {variants.map((v) => (
                        <Card
                          key={v.label}
                          hoverable
                          onClick={() => v.members.forEach(addMember)}
                          bodyStyle={{ padding: 12 }}
                        >
                          <h3
                            style={{ margin: "6px 0 12px", fontSize: "24px" }}
                          >
                            {v.label}
                          </h3>
                          <Table
                            rowKey="id"
                            dataSource={v.members}
                            columns={[...empCols.slice(0, 3)]}
                            size="small"
                            pagination={false}
                          />
                          <p
                            style={{
                              marginTop: 8,
                              fontSize: 14,
                              color: "#555",
                            }}
                          >
                            {v.desc}
                          </p>
                        </Card>
                      ))}
                    </div>
                  )}
                </Tabs.TabPane>
              </Tabs>
            </Card>
          </Col>

          {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
          <Col xs={24} md={10}>
            <Card
              title={`–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ (${team.length})`}
              style={{ height: "100%" }}
            >
              <Table
                rowKey="id"
                dataSource={team}
                columns={teamCols}
                size="small"
                pagination={false}
              />

              <div style={{ marginTop: 24, textAlign: "right" }}>
                <Button
                  onClick={() => navigate(-1)}
                  style={{ marginRight: 12 }}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button type="primary" onClick={() => form.submit()}>
                  –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                </Button>
              </div>
            </Card>
          </Col>
        </Row>
      </div>

      <Footer />
    </>
  );
}
